<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="mssqlDatabaseSetup" xml:space="preserve">
    <value>/****** Object:  Table [dbo].[bans]    Script Date: 07/20/2013 08:13:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[bans]') AND type in (N'U'))
DROP TABLE [dbo].[bans]

/****** Object:  Table [dbo].[board]    Script Date: 07/20/2013 08:13:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[board]') AND type in (N'U'))
DROP TABLE [dbo].[board]

/****** Object:  Table [dbo].[files]    Script Date: 07/20/2013 08:13:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[files]') AND type in (N'U'))
DROP TABLE [dbo].[files]

/****** Object:  Table [dbo].[ioqueue]    Script Date: 07/20/2013 08:13:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ioqueue]') AND type in (N'U'))
DROP TABLE [dbo].[ioqueue]

/****** Object:  Table [dbo].[lockedT]    Script Date: 07/20/2013 08:13:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[lockedT]') AND type in (N'U'))
DROP TABLE [dbo].[lockedT]

/****** Object:  Table [dbo].[mods]    Script Date: 07/20/2013 08:13:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mods]') AND type in (N'U'))
DROP TABLE [dbo].[mods]

/****** Object:  Table [dbo].[reports]    Script Date: 07/20/2013 08:13:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[reports]') AND type in (N'U'))
DROP TABLE [dbo].[reports]

/****** Object:  Default [DF_bans_effective]    Script Date: 07/20/2013 08:13:55 ******/
IF  EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_bans_effective]') AND parent_object_id = OBJECT_ID(N'[dbo].[bans]'))
Begin
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_bans_effective]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[bans] DROP CONSTRAINT [DF_bans_effective]
END


End

/****** Object:  Table [dbo].[reports]    Script Date: 07/20/2013 08:13:55 ******/
SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[reports]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[reports](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[postID] [int] NULL,
	[reporterIP] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[time] [datetime] NULL,
	[comment] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
END

/****** Object:  Table [dbo].[mods]    Script Date: 07/20/2013 08:13:55 ******/
SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mods]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[mods](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[username] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[password] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[power] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
END

/****** Object:  Table [dbo].[lockedT]    Script Date: 07/20/2013 08:13:55 ******/
SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[lockedT]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[lockedT](
	[locked] [int] NOT NULL
)
END

/****** Object:  Table [dbo].[ioqueue]    Script Date: 07/20/2013 08:13:55 ******/
SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ioqueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[ioqueue](
	[tid] [int] NOT NULL
)
END

/****** Object:  Table [dbo].[files]    Script Date: 07/20/2013 08:13:55 ******/
SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[files]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[files](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[postID] [int] NOT NULL,
	[chanbname] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[realname] [nvarchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[size] [bigint] NOT NULL,
	[dimension] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[md5] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[extension] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[mimetype] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[sfw] [bit] NULL
)
END

/****** Object:  Table [dbo].[board]    Script Date: 07/20/2013 08:13:55 ******/
SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[board]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[board](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[type] [int] NOT NULL,
	[parentT] [int] NULL,
	[time] [datetime] NULL,
	[postername] [nvarchar](1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[comment] [nvarchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[email] [nvarchar](1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[subject] [nvarchar](1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[password] [nvarchar](1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IP] [varchar](16) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[bumplevel] [datetime] NULL,
	[ua] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[posterID] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[sticky] [bit] NOT NULL,
	[locked] [bit] NOT NULL,
	[mta] [bit] NOT NULL,
	[hasFile] [bit] NOT NULL
)
END

/****** Object:  Table [dbo].[bans]    Script Date: 07/20/2013 08:13:55 ******/
SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[bans]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[bans](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[perm] [bit] NOT NULL,
	[expiry] [datetime] NOT NULL,
	[comment] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[post] [int] NOT NULL,
	[IP] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[canview] [bit] NOT NULL,
	[modname] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[bannedon] [datetime] NOT NULL,
	[effective] [bit] NOT NULL
)
END

/****** Object:  Default [DF_bans_effective]    Script Date: 07/20/2013 08:13:55 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_bans_effective]') AND parent_object_id = OBJECT_ID(N'[dbo].[bans]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_bans_effective]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[bans] ADD  CONSTRAINT [DF_bans_effective]  DEFAULT ((1)) FOR [effective]
END


End</value>
  </data>
  <data name="mysqlDatabaseSetup" xml:space="preserve">
    <value>-- phpMyAdmin SQL Dump
-- version 3.3.8.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Jul 20, 2013 at 08:32 AM
-- Server version: 5.1.51
-- PHP Version: 5.3.3

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `channelboard`
--

-- --------------------------------------------------------

--
-- Table structure for table `bans`
--

CREATE TABLE IF NOT EXISTS `bans` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `perm` tinyint(1) NOT NULL,
  `expiry` datetime NOT NULL,
  `comment` text NOT NULL,
  `post` int(11) NOT NULL,
  `IP` tinytext NOT NULL,
  `canview` tinyint(1) NOT NULL,
  `modname` text NOT NULL,
  `bannedon` datetime NOT NULL,
  `effective` tinyint(1) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

--
-- Dumping data for table `bans`
--


-- --------------------------------------------------------

--
-- Table structure for table `board`
--

CREATE TABLE IF NOT EXISTS `board` (
  `ID` int(4) NOT NULL AUTO_INCREMENT,
  `type` int(4) NOT NULL,
  `parentT` int(4) DEFAULT NULL,
  `time` datetime DEFAULT NULL,
  `postername` text,
  `comment` text,
  `email` text,
  `subject` text,
  `password` text,
  `IP` text NOT NULL,
  `bumplevel` datetime DEFAULT NULL,
  `sticky` tinyint(1) NOT NULL,
  `ua` text,
  `posterID` text,
  `locked` tinyint(1) NOT NULL,
  `mta` tinyint(1) NOT NULL,
  `hasFile` tinyint(1) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

--
-- Dumping data for table `board`
--


-- --------------------------------------------------------

--
-- Table structure for table `files`
--

CREATE TABLE IF NOT EXISTS `files` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `postID` int(11) NOT NULL,
  `chanbname` text NOT NULL,
  `realname` text NOT NULL,
  `size` bigint(20) NOT NULL,
  `dimension` text NOT NULL,
  `md5` text NOT NULL,
  `extension` text NOT NULL,
  `mimetype` text NOT NULL,
  `sfw` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

--
-- Dumping data for table `files`
--


-- --------------------------------------------------------

--
-- Table structure for table `ioqueue`
--

CREATE TABLE IF NOT EXISTS `ioqueue` (
  `tid` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `ioqueue`
--


-- --------------------------------------------------------

--
-- Table structure for table `lockedt`
--

CREATE TABLE IF NOT EXISTS `lockedt` (
  `tid` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `lockedt`
--


-- --------------------------------------------------------

--
-- Table structure for table `mods`
--

CREATE TABLE IF NOT EXISTS `mods` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `username` text NOT NULL,
  `password` text NOT NULL,
  `power` text,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

--
-- Dumping data for table `mods`
--


-- --------------------------------------------------------

--
-- Table structure for table `reports`
--

CREATE TABLE IF NOT EXISTS `reports` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `postID` int(11) DEFAULT NULL,
  `reporterIP` text,
  `time` datetime DEFAULT NULL,
  `comment` text,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

--
-- Dumping data for table `reports`
--</value>
  </data>
</root>